name: Jans Full Build 

on:
  push:
    branches:
      - migration/jenkins-pipelines
  schedule:
    - cron: '0 8 * * *'
  pull_request:
    branches:
      - migration/jenkins-pipelines
  workflow_dispatch:


jobs:
  # full-build-with-disabled-tests:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   env:
  #     VERSION_NAME: main
  #     MAVEN_SKIP_TESTS: true
  #     PROFILE_NAME: "default"

  #   strategy:
  #     max-parallel: 1
  #     matrix:
  #       service:
  #         - "jans-bom"
  #         - "jans-orm"
  #         - "jans-core"
  #         - "jans-lock/lock-master"
  #         - "agama"
  #         - "jans-auth-server"
  #         - "jans-link"
  #         - "jans-fido2"
  #         - "jans-scim"
  #         - "jans-keycloak-link"
  #         - "jans-config-api"
  #         - "jans-keycloak-integration"
  #         - "jans-casa"

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     with:
  #       ref: ${{ github.event.inputs.branch }}

  #   - name: Set up Java 17
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'adopt'

  #   - name: Set up Maven
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'adopt'
  #       cache: 'maven'

  #   - name: Build ${{ matrix.service }}
  #     run: |
  #       if [ "${{ github.event_name }}" == "pull_request" ]; then
  #         mvn -f ${{ matrix.service }}/pom.xml -Dcfg=${{ env.PROFILE_NAME }} -Dmaven.test.skip=${{ env.MAVEN_SKIP_TESTS }} clean install -Drevision=${{ github.head_ref }}-SNAPSHOT
  #       else
  #         mvn -f ${{ matrix.service }}/pom.xml -Dcfg=${{ env.PROFILE_NAME }} -Dmaven.test.skip=${{ env.MAVEN_SKIP_TESTS }} clean install
  #       fi

  #   - name: Publish to GitHub Packages
  #     run: mvn -B deploy -Dmaven.test.skip=${{ env.MAVEN_SKIP_TESTS }} -Dcfg=${{ env.PROFILE_NAME }}
  #     working-directory: ${{ matrix.service }}
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.JANS_TOKEN }}

  #   - name: Archive results
  #     if: always()
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: build-results
  #       path: ${{ matrix.service }}/target

  #   - name: Send notification on failure
  #     if: failure()
  #     run: echo "Build failed"

  # cleanup:
  #   if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   steps:

  #   - name: Clean up PR assets
  #     run: |
  #       # List all SNAPSHOT versions
  #       versions=$(curl -s -H "Authorization: token ${{ secrets.JANS_TOKEN }}" "https://maven.pkg.github.com/DanielKoklev/jans/maven-metadata.xml" | grep -oP '(?<=<version>)[^<]+')
        
  #       for version in $versions; do
  #         if [[ $version == *-SNAPSHOT ]]; then
  #           # Delete the version from GitHub Packages
  #           curl -X DELETE -H "Authorization: token ${{ secrets.JANS_TOKEN }}" "https://maven.pkg.github.com/DanielKoklev/jans/io/jans/${{ matrix.service }}/$version"
  #         fi
  #       done

  run-ldap-tests:
    runs-on: ubuntu-latest
    env:
      MAVEN_SKIP_TESTS: false
      PERSISTENCE_DB: ldap
      CONTAINER_NAME: ""
      VERSION_NAME: main
      PROFILE_NAME: default
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Set up Maven
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: 'maven'

    
    - name: Linux Installer
      run: |
        ls
        cd docker-jans-monolith/scripts/