name: Jans Auth Server

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 8 * * *'

jobs:
  build:
    runs-on: ubuntu-20.04

    env:
      MAVEN_SKIP_TESTS: true
      PROFILE_NAME: ""
      VERSION_NAME: main
      CONTAINER_NAME: ""
      DEVELOPMENT_BUILD: ""
      CVSS_SCORE: ""
      SKIP_FINDBUGS: ""
      DEPENDENCY_CHECK: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Java 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    
    - name: Delete workspace before build
      run: rm -rf ${{ github.workspace }}/*

    - name: Set up Maven
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'

    - name: Prepare directories and profiles for build
      run: |
          cd jans-auth-server

          rm -rf ./jans-auth
          rm -rf ./client/profiles/${{ env.PROFILE_NAME }}
          rm -rf ./server/profiles/${{ env.PROFILE_NAME }}

          if [[ $MAVEN_SKIP_TESTS == "true" ]]; then
            echo "Configuring to use default profile in build without tests execution"

            cp -rf ./client/profiles/default ./client/profiles/${{ env.PROFILE_NAME }}
            cp -rf ./server/profiles/default ./server/profiles/${{ env.PROFILE_NAME }}
          else

            if [[ $TEST_CONF_IN_HOST == "true" ]]; then
              scp -r -P 22222 root@${{ env.PROFILE_NAME }}:/opt/jans/jans-setup/output/test/jans-auth ./
            else
              scp -r -P 22222 root@${{ env.PROFILE_NAME }}:/var/snap/lxd/common/lxd/storage-pools/default/containers/$CONTAINER_NAME/rootfs/opt/jans/jans-setup/output/test/jans-auth ./
            fi

            mkdir -p ./client/profiles/${{ env.PROFILE_NAME }}
            mkdir -p ./server/profiles/${{ env.PROFILE_NAME }}
          
            cp ./jans-auth/client/* ./client/profiles/${{ env.PROFILE_NAME }}
            cp ./jans-auth/server/* ./server/profiles/${{ env.PROFILE_NAME }}

            cp -f ./client/profiles/default/client_keystore.p12 ./client/profiles/${{ env.PROFILE_NAME }}
            cp -f ./server/profiles/default/client_keystore.p12 ./server/profiles/${{ env.PROFILE_NAME }}

            rm -rf ./jans-auth
          fi

          cd agama
          rm -rf ./engine/profiles/${{ env.PROFILE_NAME }}

          if [[ $MAVEN_SKIP_TESTS == "true" ]]; then
            echo "Configuring to use default profile in build without tests execution"
            cp -rf ./engine/profiles/default ./engine/profiles/${{ env.PROFILE_NAME }}
          else
            if [[ $TEST_CONF_IN_HOST == "true" ]]; then
              scp -P 22222 root@${{ env.PROFILE_NAME }}:/opt/jans/jans-setup/output/test/agama/config-agama-test.properties .
            else
              scp -P 22222 root@${{ env.PROFILE_NAME }}:/var/snap/lxd/common/lxd/storage-pools/default/containers/$CONTAINER_NAME/rootfs/opt/jans/jans-setup/output/test/agama/config-agama-test.properties .
            fi

            mkdir -p ./engine/profiles/${{ env.PROFILE_NAME }}
            mv config-agama-test.properties ./engine/profiles/${{ env.PROFILE_NAME }}/config-agama-test.properties
          fi

    - name: Build with Maven
      run: mvn -Dcfg=${{ env.PROFILE_NAME }} -Dmaven.test.skip=${{ env.MAVEN_SKIP_TESTS }} -Ddevelopment-build=${{ env.DEVELOPMENT_BUILD }} -Dcvss-score=${{ env.CVSS_SCORE }} -Dfindbugs.skip=${{ env.SKIP_FINDBUGS }} -Ddependency.check=${{ env.DEPENDENCY_CHECK }} -U -fae clean compile install javadoc:javadoc site
      env:
        MAVEN_OPTS: -Xmx2g

    - name: Move javadoc files in appropriate location
      run: |
        cd jans-auth-server

        rm -rf ./jans-auth
        rm -rf ./client/profiles/${{ env.PROFILE_NAME }}
        rm -rf ./server/profiles/${{ env.PROFILE_NAME }}

        mkdir -p /var/www/html/javadocs/jans-auth/${{ env.VERSION_NAME}}

        rm -rf /var/www/html/javadocs/jans-auth/${{ env.VERSION_NAME }}/client/{apidocs,css,images} 
        rm -rf /var/www/html/javadocs/jans-auth/${{ env.VERSION_NAME }}/model/{apidocs,css,images} 
        rm -rf /var/www/html/javadocs/jans-auth/${{ env.VERSION_NAME }}/server/{apidocs,css,images} 

        mkdir -p /var/www/html/javadocs/jans-auth/${{ env.VERSION_NAME }}/{client,model,server}

        cp -rv ./client/target/site/apidocs/* /var/www/html/javadocs/jans-auth/${{ env.VERSION_NAME }}/client/
        cp -rv ./model/target/site/apidocs/* /var/www/html/javadocs/jans-auth/${{ env.VERSION_NAME }}/model/
        cp -rv ./server/target/site/apidocs/* /var/www/html/javadocs/jans-auth/${{ env.VERSION_NAME }}/server/

    - name: Trigger DeployWar Workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl --location --request POST 'https://api.github.com/repos/YourRepo/YourProject/actions/workflows/deploy-war.yml/dispatches' \
        --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        --header 'Content-Type: application/json' \
        --data '{
          "ref": "main",
          "inputs": {
            "SERVER_NAME": "${{ env.PROFILE_NAME }}",
            "SERVICE_NAME": "jans-auth",
            "CE_VERSION": "1.0",
            "WAR_LOCATION": "https://jenkins.jans.io/maven/io/jans/jans-auth-server/1.0.2-SNAPSHOT/jans-auth-server-1.0.2-SNAPSHOT.war"
          }
        }'

    - name: Execute build docker-image workflow
      env:
        GITGLUUTOKEN: ${{ secrets.GITGLUUTOKEN }}
      run: |
        curl --location --request POST 'https://api.github.com/repos/JanssenProject/jans-cloud-native/actions/workflows/15443035/dispatches' \
        --header 'Authorization: Bearer '${{ secrets.GITGLUUTOKEN }} \
        --header 'Content-Type: application/json' \
        --data '{"ref":"master", "inputs": { "services":"docker-jans-lock" }}'

    - name: Archive results
      uses: actions/upload-artifact@v3
      with:
        name: build-results
        path: target

    - name: Notify on failure
      if: failure()
      run: |
        curl -X POST -H 'Content-Type: application/json' -d '{"channel": "bot_reporter", "text": "Build ${{ github.run_id }} for job Build Jans Auth Server failed.\r"}' https://rocketchat-webhook-url
        
    - name: Notify on unstable
      if: always() && !success() && !failure()
      run: |
        curl -X POST -H 'Content-Type: application/json' -d '{"channel": "bot_reporter", "text": "Build ${{ github.run_id }} for job Build Jans Auth Server is unstable.\r"}' https://rocketchat-webhook-url
        
    - name: Notify on success
      if: success()
      run: |
        curl -X POST -H 'Content-Type: application/json' -d '{"channel": "bot_reporter", "text": "Build ${{ github.run_id }} for job Build Jans Auth Server finished successfully.\r"}' https://rocketchat-webhook-url


